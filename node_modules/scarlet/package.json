{
  "name": "scarlet",
  "description": "A Javascript interceptor",
  "version": "0.0.4",
  "author": {
    "name": "Tim Chaplin",
    "email": "tim.chaplin@ticktockdevelopment.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/tjchaplin/scarlet.git"
  },
  "homepage": "https://github.com/tjchaplin/scarlet.git",
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.4.3",
    "grunt-contrib-watch": "~0.4.0",
    "grunt-release": "~0.3.3"
  },
  "browserDependencies": {},
  "dependencies": {},
  "keywords": [],
  "engines": {
    "node": ">= 0.2.0"
  },
  "main": "./index.js",
  "directories": {
    "test": "tests",
    "lib": "lib"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha tests/*"
  },
  "license": "MIT",
  "readme": "scarlet\n=======\n\nA Javascript interceptor\n\n#Installation\n\n    npm install scarlet\n    \n#Getting Started\n\n##Register An Interceptor\n\n    var Scarlet = require(\"scarlet\");\n  \tScarlet.register(new myInterceptor()).forObject(objectToIntercept);\n    \nRegistering an interceptor injects an interceptor between every method on an object.  Now whenever the \"objectToIntercept\" is instantiated all methods will be intercepted:\n\n    var myInterceptedObject = new objecToIntercept();\n    myInterceptedObject.dostuff(); //the method call will make a call to the interceptor\n\n##Restore An Object Without An Interceptor\n\nIn certain cases you may want to remove the interceptor and reset the object back to how it was before interception.\n\n    Scarlet.reset(); //Resets all registered objects\n",
  "_id": "scarlet@0.0.4",
  "dist": {
    "shasum": "ee9f7d3401761f98d463261321f3e53ab44bbabd"
  },
  "_from": "scarlet@0.0.4"
}
